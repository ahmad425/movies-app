pipeline {
  agent any
  environment {
    GIT_COMMIT_SHORT = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
    BRANCH = 'master'
    AWS_ACCOUNT_ID = '303437664068'
    AWS_DEFAULT_REGION = 'us-east-1'
    IMAGE_TAG="${GIT_COMMIT_SHORT}"
    IMAGE_REPO_NAME = 'movies-app'
  }
  stages {
    stage('Declarative: Checkout SCM') {
      steps {
        checkout scmGit(
          branches: [[name: '*/master']], 
          extensions: [], 
          userRemoteConfigs: [[url: 'https://github.com/ahmad425/movies-app.git']]
        )
      }
    }
    stage('Logging into ECR') {
      steps {
        withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-creds-id']]) {
          sh "aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.us-east-1.amazonaws.com"
        }
      }
    }
    stage('Build Docker Image') {
      steps {
        script {
          sh "docker build -f docker/app/Dockerfile -t ${IMAGE_REPO_NAME}:${IMAGE_TAG} ."
        }
      }
    }
    stage('Pushing to ECR') {
      steps {
        script {
          sh "docker tag ${IMAGE_REPO_NAME}:${IMAGE_TAG} ${AWS_ACCOUNT_ID}.dkr.ecr.us-east-1.amazonaws.com/${IMAGE_REPO_NAME}:${IMAGE_TAG}"
          sh "docker push ${AWS_ACCOUNT_ID}.dkr.ecr.us-east-1.amazonaws.com/${IMAGE_REPO_NAME}:${IMAGE_TAG}"
        }
      }
    }
    stage('Linting Helm Charts') {
      steps {
        script {
          dir("helm-charts/app-charts") {
            sh """
              helm kubeconform . -n movies-staging \
              -f values.yaml \
              -f vars/staging/server.yaml \
              --set image.tag='${IMAGE_TAG}' --set environmentVariables.REVISION='${IMAGE_TAG}' \
              --schema-location default --schema-location 'https://raw.githubusercontent.com/datreeio/CRDs-catalog/main/{{.Group}}/{{.ResourceKind}}_{{.ResourceAPIVersion}}.json'
            """
          }
        }
      }
    }
    stage('Deploy Helm Charts') {
      when {
        not {
          expression { sh(returnStdout: true, script: """
              cd helm-charts/app-charts && \
              helm diff upgrade app . -n movies-staging \
              -f values.yaml \
              -f vars/staging/server.yaml \
              --set image.tag='${IMAGE_TAG}' --set environmentVariables.REVISION='${IMAGE_TAG}' \
              --allow-unreleased --three-way-merge
          """).trim().isEmpty() }
        }
      }
      steps {
        script {
          dir("helm-charts/app-charts") {
            sh """
                helm upgrade --install app . -n movies-staging \
                -f values.yaml \
                -f vars/staging/server.yaml \
                --set image.tag='${IMAGE_TAG}'  --set environmentVariables.REVISION='${IMAGE_TAG}' \
                --install --wait --timeout 600s
            """
          }
        }
      }
    }
    stage('Update Services') {
      steps {
        script {
          def labels = sh(returnStdout: true, script: """kubectl get deploy -n movies-staging \
              -l 'app.kubernetes.io/component=server,app.kubernetes.io/instance=app' \
              --show-labels --no-headers | awk '{print \$(NF)}'
          """).trim()
          def service_name = sh(returnStdout: true, script: """kubectl get service -n movies-staging \
              -l 'app.kubernetes.io/component=fullstack,app.kubernetes.io/name=movies-fullstack-config' \
              -o jsonpath='{.items[*].metadata.name}'
          """).trim()
          sh "kubectl set selector service '${service_name}' -n movies-staging '${labels}'"
        }
      }
    }
  }
}
